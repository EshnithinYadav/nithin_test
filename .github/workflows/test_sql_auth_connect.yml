name: test GCP Cloud SQL Auth Proxy Version Check and Send Slack Alerts

on:
  workflow_dispatch:

jobs:
  GCP_SQL_Auth_Proxy_Version_Check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [prod]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      - name: Set environment variables
        run: |
          if [ "${{ matrix.env }}" == "stage" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY=${{ secrets.GCP_SA_KEY_STAGE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_STAGE }}" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_STAGE }}" >> $GITHUB_ENV
          elif [ "${{ matrix.env }}" == "prod" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY=${{ secrets.GCP_SA_KEY_PROD }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_PROD }}" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PROD }}" >> $GITHUB_ENV
          fi

      - name: Authenticate to Google Cloud
        run: |
          echo "${{ env.GCP_SERVICE_ACCOUNT_KEY }}" | base64 --decode > $HOME/gcp-key.json
          gcloud auth activate-service-account --key-file=$HOME/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}

      - name: Capitalize the environment name
        run: |
          environment=$(echo ${{ matrix.env }} | tr '[:lower:]' '[:upper:]')
          echo "environment=${environment}" >> $GITHUB_ENV

    
      - name: Fetch Cloud SQL Auth Proxy version from active instance templates in prod
        if: matrix.env == 'prod'
        run: |
          fetch_sql_auth_proxy_version_prod() {
              local instance_group=$1
              
              echo "Fetching SQL Auth Proxy version for instance group: $instance_group (prod env)"
              
              # Fetch the instance template URL from the active instance group
              instance_template=$(gcloud compute instance-groups managed describe "$instance_group" --region="us-east4" --format="value(instanceTemplate)")
      
              if [ -z "$instance_template" ]; then
                  echo "Warning: No active instance template found for instance group $instance_group. Skipping."
                  return 0
              fi
      
              # Extract version info from the instance template using grep and sed
              sql_proxy_version=$(gcloud compute instance-templates describe "$instance_template" | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+')
      
              if [ -z "$sql_proxy_version" ]; then
                  echo "Warning: Could not extract Cloud SQL Auth Proxy version from template $instance_template for instance group $instance_group. Skipping."
                  return 0
              fi
      
              echo "Instance group $instance_group is using Cloud SQL Auth Proxy version $sql_proxy_version."
              echo "$instance_group,$sql_proxy_version" >> sql_auth_proxy_versions.txt
              return 0
          }
      
          # List all managed instance groups in the prod environment
          instance_groups=$(gcloud compute instance-groups managed list --filter="region:(us-east4)" --format="csv[no-heading](name)")
      
          if [ -z "$instance_groups" ]; then
              echo "Warning: No active instance groups found in the prod environment."
              echo "[]" > sql_auth_proxy_versions.json
              exit 0
          fi
      
          echo "[" > sql_auth_proxy_versions.json
      
          # Loop over the active instance groups and fetch the version info
          while IFS=, read -r instance_group; do
              echo "Processing instance group: $instance_group"
              fetch_sql_auth_proxy_version_prod "$instance_group"
              
              if [ $? -eq 0 ] && [ -f sql_auth_proxy_versions.txt ]; then
                  version=$(tail -n1 sql_auth_proxy_versions.txt | cut -d',' -f2)
                  echo "  {\"instance_group\": \"$instance_group\", \"version\": \"$version\"}," >> sql_auth_proxy_versions.json
              else
                  echo "Skipping instance group $instance_group due to errors or missing version."
              fi
          done <<< "$instance_groups"
      
          sed -i '$ s/,$//' sql_auth_proxy_versions.json
          echo "]" >> sql_auth_proxy_versions.json
      
          if [ -f sql_auth_proxy_versions.json ]; then
              echo "SQL Auth Proxy versions were successfully fetched and saved."
              cat sql_auth_proxy_versions.json
          else
              echo "Warning: No SQL Auth Proxy versions were found for any instance groups."
              echo "[]" > sql_auth_proxy_versions.json
          fi




      - name: Fetch the latest Cloud SQL Auth Proxy version
        id: get_latest_version
        run: |
          latest_version=$(curl -s https://api.github.com/repos/GoogleCloudPlatform/cloud-sql-proxy/releases/latest | jq -r '.tag_name')
          IFS='.' read -r major minor patch <<< "$(echo $latest_version | sed 's/v//')"

          if [ "$minor" -gt 0 ]; then
            n_minus_1_version="v${major}.$((minor - 1)).0"
          else
            n_minus_1_version="v$((major - 1)).X.X"
          fi

          echo "Latest Cloud SQL Auth Proxy version: $latest_version"
          echo "N-1 version: $n_minus_1_version"
          echo "N_MINUS_1_VERSION=$n_minus_1_version" >> $GITHUB_ENV

     - name: Compare versions and send consolidated Slack alerts
  run: |
    n_minus_1_version="${{ env.N_MINUS_1_VERSION }}"
    versions=$(cat sql_auth_proxy_versions.json)
    message="GCP_SQL_AUTH_PROXY_VERSION_CHECK:\n\n"
    update_needed=false

    # Loop through the versions using jq
    for row in $(echo "${versions}" | jq -r '.[] | @base64'); do
        _jq() {
            echo ${row} | base64 --decode | jq -r ${1}
        }

        template=$(_jq '.template')
        current_version=$(_jq '.version')

        # Compare the current version with the N-1 version
        if [ "$current_version" != "$n_minus_1_version" ]; then
            update_needed=true
            message="${message}Template: $template is using an outdated Cloud SQL Auth Proxy version ($current_version). N-1 version is $n_minus_1_version.\n"
        fi
    done

    # Send Slack message if update is needed
    if [ "$update_needed" = true ]; then
        echo "Sending consolidated Slack message"
        curl -X POST -H 'Content-type: application/json' --data "{ 'text': '${message}'}" "${{ env.SLACK_WEBHOOK_URL }}"
    else
        echo "All templates are up to date."
    fi

- name: Send alert to Slack on job failure
  if: ${{ failure() }}
  run: |
    message="The workflow for Cloud SQL Auth Proxy version check failed in the ${{ env.environment }} environment."
    curl -X POST -H 'Content-type: application/json' --data "{ 'text': 'GCP_SQL_AUTH_PROXY_VERSION_CHECK:\n\n$message'}" "${{ env.SLACK_WEBHOOK_URL }}"
