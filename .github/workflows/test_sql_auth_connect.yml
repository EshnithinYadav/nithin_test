name: Fetch SQL Auth Connector Version

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"  # Runs daily at midnight

jobs:
  fetch_sql_auth_connector_version:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [stage]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets[format('GCP_PROJECT_ID_{0}', matrix.environment)] }}
        version: 'latest'
        install_components: 'beta'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets[format('GCP_SA_KEY_{0}', matrix.environment)] }}

    - name: Fetch Instance Templates
      id: fetch_templates
      run: |
        # Fetch all instance templates related to SQL Auth Connector
        gcloud compute instance-templates list --format="get(name)" | grep "cloudsql-auth-template" > templates.txt
        echo "Fetched templates: $(cat templates.txt)"

    - name: Get Versions
      id: get_versions
      run: |
        # Initialize a variable to store unique versions
        versions=""

        # Loop through each template and get the version
        while read -r template; do
          version=$(gcloud compute instance-templates describe "$template" --format=json | \
                    grep -oP 'storage.googleapis.com.*?v\K[0-9]+\.[0-9]+\.[0-9]+' | sort -u)
          if [ -n "$version" ]; then
            versions="$versions$template: $version"$'\n'
          fi
        done < templates.txt

        # Print and save the unique versions
        echo "Versions found:"
        echo "$versions"
        # Use a delimiter to ensure proper formatting in the environment variable
        echo "versions=${versions//$'\n'/, }" >> $GITHUB_ENV  # Replace newlines with commas for the environment variable

    - name: Display Versions
      run: |
        echo "Fetched SQL Auth Connector Versions:"
        echo "${{ env.versions }}"

    - name: Fetch Latest Release Version
      id: fetch_latest_release
      run: |
        latest_version=$(curl -s https://api.github.com/repos/GoogleCloudPlatform/cloud-sql-proxy/releases/latest | jq -r '.tag_name' | cut -c 2-) # Removes the 'v' prefix
        echo "Latest release version: $latest_version"
        echo "::set-output name=latest_version::$latest_version"

    - name: Compare Versions
      id: compare_versions
      run: |
        current_versions="${{ env.versions }}"
        latest_version="${{ steps.fetch_latest_release.outputs.latest_version }}"
        upgrade_available="false"
        instances_info=""

        # Function to compare version strings
        version_ge() {
            # Compare version 1 and version 2
            # Return true if version 1 >= version 2
            IFS='.' read -r -a v1 <<< "$1"
            IFS='.' read -r -a v2 <<< "$2"
            for ((i = 0; i < ${#v1[@]} || i < ${#v2[@]}; i++)); do
                local segment1=${v1[i]:-0}
                local segment2=${v2[i]:-0}
                if ((10#$segment1 > 10#$segment2)); then return 0; fi
                if ((10#$segment1 < 10#$segment2)); then return 1; fi
            done
            return 0
        }

        # Calculate n-1 version
        major_version=$(echo "$latest_version" | cut -d '.' -f 1)
        minor_version=$(echo "$latest_version" | cut -d '.' -f 2)
        n_minus_one_version="$major_version.$minor_version.$(( $(echo "$latest_version" | cut -d '.' -f 3) - 1 ))"

        while IFS= read -r line; do
          instance_name=$(echo "$line" | cut -d ':' -f 1)
          current_version=$(echo "$line" | cut -d ':' -f 2 | xargs) # Trim whitespace

          # Compare current version with n-1 version
          if version_ge "$current_version" "$n_minus_one_version"; then
            upgrade_available="true"
            instances_info+="Instance: $instance_name, Current Version: $current_version, Latest n-1 Version: $n_minus_one_version\\n" # Add escape for newline
          fi
        done <<< "$current_versions"

        if [ "$upgrade_available" = "true" ]; then
          echo "Upgrade available."
          echo -e "$instances_info" >> $GITHUB_ENV
          echo "instances_info=${instances_info//$'\n'/\\n}" >> $GITHUB_ENV # Escape newlines for environment variable
          echo "upgrade_available=true" >> $GITHUB_ENV
        else
          echo "No version upgrade needed."
          echo "upgrade_available=false" >> $GITHUB_ENV
        fi


    - name: Send Slack Notification If Upgrade Available
      if: env.upgrade_available == 'true'
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: custom
        author_name: "SQL Auth Connector Version Check"
        custom_payload: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*SQL Auth Connector Version Upgrade Available*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Instances Information:*\n${{ env.instances_info }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets[format('SLACK_WEBHOOK_URL_{0}', matrix.environment)] }}

    - name: Send Slack Notification on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        fields: custom
        author_name: "SQL Auth Connector Version Check Failure"
        custom_payload: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*SQL Auth Connector Version Check Script Failed*"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Please investigate the issue."
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets[format('SLACK_WEBHOOK_URL_{0}', matrix.environment)] }}
