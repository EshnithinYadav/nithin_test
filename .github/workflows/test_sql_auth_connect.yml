name: Fetch SQL Auth Proxy Versions

on:
  schedule:
    - cron: "0 0 * * *"  # Runs daily at midnight, adjust as needed
  workflow_dispatch:

jobs:
  fetch-versions:
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID_PROD: ${{ secrets.GCP_PROJECT_ID_PROD }}
      GCP_PROJECT_ID_STAGE: ${{ secrets.GCP_PROJECT_ID_STAGE }}
      GCP_SA_KEY_PROD: ${{ secrets.GCP_SA_KEY_PROD_PLAIN }}
      GCP_SA_KEY_STAGE: ${{ secrets.GCP_SA_KEY_STAGE_PLAIN }}
      SLACK_WEBHOOK_URL_PROD: ${{ secrets.SLACK_WEBHOOK_URL_PROD }}
      SLACK_WEBHOOK_URL_STAGE: ${{ secrets.SLACK_WEBHOOK_URL_STAGE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Create a temporary file for the service account key (PROD)
      - name: Set up Google Cloud SDK for PROD
        run: |
          echo "${{ secrets.GCP_SA_KEY_PROD }}" > $HOME/gcloud-prod-key.json
          gcloud auth activate-service-account --key-file=$HOME/gcloud-prod-key.json
          gcloud config set project $GCP_PROJECT_ID_PROD

      - name: Fetch instance templates in PROD
        run: |
          echo "Fetching instance templates for PROD..."
          gcloud compute instance-templates list --format=json > prod_instance_templates.json

      - name: Extract version info from PROD templates
        run: |
          echo "Extracting version information..."
          cat prod_instance_templates.json | jq '.[] | {name: .name, version: .properties.metadata.items[] | select(.key=="cloud-sql-auth-proxy-version") | .value}' > prod_versions.json
          cat prod_versions.json

      - name: Post to Slack (PROD)
        if: success()
        run: |
          echo "Posting version info to Slack..."
          curl -X POST -H 'Content-type: application/json' --data "$(jq -n --argjson data "$(cat prod_versions.json)" '{text: "Cloud SQL Auth Proxy Version Info for PROD: \($data)"}')" $SLACK_WEBHOOK_URL_PROD

      # Clean up the service account key (PROD)
      - name: Clean up key file (PROD)
        run: |
          rm $HOME/gcloud-prod-key.json

      # Repeat steps for STAGE environment
      - name: Set up Google Cloud SDK for STAGE
        run: |
          echo "${{ secrets.GCP_SA_KEY_STAGE }}" > $HOME/gcloud-stage-key.json
          gcloud auth activate-service-account --key-file=$HOME/gcloud-stage-key.json
          gcloud config set project $GCP_PROJECT_ID_STAGE

      - name: Fetch instance templates in STAGE
        run: |
          echo "Fetching instance templates for STAGE..."
          gcloud compute instance-templates list --format=json > stage_instance_templates.json

      - name: Extract version info from STAGE templates
        run: |
          echo "Extracting version information..."
          cat stage_instance_templates.json | jq '.[] | {name: .name, version: .properties.metadata.items[] | select(.key=="cloud-sql-auth-proxy-version") | .value}' > stage_versions.json
          cat stage_versions.json

      - name: Post to Slack (STAGE)
        if: success()
        run: |
          echo "Posting version info to Slack..."
          curl -X POST -H 'Content-type: application/json' --data "$(jq -n --argjson data "$(cat stage_versions.json)" '{text: "Cloud SQL Auth Proxy Version Info for STAGE: \($data)"}')" $SLACK_WEBHOOK_URL_STAGE

      # Clean up the service account key (STAGE)
      - name: Clean up key file (STAGE)
        run: |
          rm $HOME/gcloud-stage-key.json
