name: GCP SQL Auth Proxy Version Check

on:
  workflow_dispatch:

jobs:
  version-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY_PROD_PLAIN }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Fetch Instance Groups
        id: fetch-instance-groups
        run: |
          gcloud compute instance-groups managed list --filter="name:(*sql auth proxy*)" --format="value(name,region)" --project="${{ secrets.GCP_PROJECT_ID }}" > instance_groups.txt
          echo "Instance groups fetched:"
          cat instance_groups.txt

      - name: Fetch Latest Version from GitHub
        id: fetch-latest-version
        run: |
          echo "Fetching latest version from GitHub..."
          latest_version=$(curl -s https://api.github.com/repos/GoogleCloudPlatform/cloud-sql-proxy/releases/latest | grep -oP '"tag_name": "\K[^"]+')
          echo "Latest version is: $latest_version"
          echo "::set-output name=latest_version::$latest_version"

      - name: Initialize Version Info
        run: echo "" > version_info_prod.txt

      - name: Process Instance Groups
        run: |
          while IFS=$'\t' read -r instance_group region; do
            echo "Processing instance group: $instance_group in region: $region"

            # Fetch the current version
            current_version=$(gcloud compute instance-templates describe $instance_group --format="get(properties.metadata.items[?key=='version'].value)" || echo "N/A")
            echo "Current version for $instance_group: $current_version"

            # Compare versions and update version info
            if [[ "$latest_version" != "$current_version" ]]; then
              update_status="Yes"
            else
              update_status="No"
            fi
            
            # Log version info
            echo "$instance_group" >> version_info_prod.txt
            echo "Version: $current_version" >> version_info_prod.txt
            echo "Latest Version: $latest_version" >> version_info_prod.txt
            echo "Update Available: $update_status" >> version_info_prod.txt
            echo "------" >> version_info_prod.txt
            
          done < instance_groups.txt

      - name: Send Slack Notification
        run: |
          echo "Sending Slack notification..."
          while IFS= read -r line; do
            curl -X POST -H 'Content-type: application/json' --data '{"text":"'"$line"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          done < version_info_prod.txt
