name: Prod GCP Gateway Certificate Expiration Check and Send Slack Alerts
on:
  workflow_dispatch:  # Allows manual trigger
jobs:
  GCP-Gateway-Certificate-Expiration-Check-and-Send-Slack-Alerts:
    runs-on: ubuntu-latest
    env:
      EXPIRY_THRESHOLD_DAYS: 300  # Set the expiry threshold to 300 days
      K8S_SECRET_NAME: "gateway-certs"  # Kubernetes secret name for prod
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_PROD }}  # Webhook URL as secret
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_PROD }}  # Set project ID from secrets
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_PROD }}

      - name: Setting up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_PROD }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Authenticate kubectl
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID_PROD }}
          gcloud container clusters get-credentials prod-k8s-cluster --zone=us-west1 --project ${{ secrets.GCP_PROJECT_ID_PROD }}

      - name: Get Certificate from Kubernetes Secret
        run: |
          # Fetch the base64-encoded certificate from the Kubernetes secret
          cert_data=$(kubectl get secret ${{ env.K8S_SECRET_NAME }} -o jsonpath="{.data['tls\.crt']}")
          # Decode the certificate
          echo "$cert_data" | base64 --decode > certificate.crt
          # Extract expiry date from the certificate
          expiry_date=$(openssl x509 -enddate -noout -in certificate.crt | cut -d= -f2)
          echo "Expiry Date: $expiry_date"

      - name: Check Certificate Expiry
        run: |
          # Convert the expiration date to epoch time
          expiry_date_epoch=$(date -d "$expiry_date" +%s)
          current_date_epoch=$(date +%s)
          # Calculate how many days are left until the certificate expires
          days_until_expiry=$(( (expiry_date_epoch - current_date_epoch) / 86400 ))
          echo "Days until certificate expiry: $days_until_expiry"

          # Define threshold in days (e.g., 30 days)
          expiry_threshold=300
          # Check if the certificate is expiring within the threshold
          if [[ $days_until_expiry -le $expiry_threshold ]]; then
            echo "*Certificate Name*: ${K8S_SECRET_NAME}" > certificate_expiry_alert.txt
            echo "*Expiry Date*: $expiry_date" >> certificate_expiry_alert.txt
            echo "*Days Until Expiry*: $days_until_expiry" >> certificate_expiry_alert.txt
          else
            echo "The certificate is valid for more than $expiry_threshold days."
          fi

      - name: Send Slack Alert if Certificate Expiration Detected
        run: |
          # Check if the certificate_expiry_alert.txt file exists
          if [ -f certificate_expiry_alert.txt ]; then
            # If file exists, send the Slack notification
            message=$(cat certificate_expiry_alert.txt)
            curl -X POST -H 'Content-type: application/json' --data "{
              'text': 'GCP_GATEWAY_CERTIFICATE_EXPIRY_ALERT:\n\n$message'
            }" "${{ env.SLACK_WEBHOOK_URL }}"
          else
            echo "No certificate expiration detected. No alert will be sent."
          fi

      - name: Send alert to Slack on job failure
        if: ${{ failure() }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{
            'text': 'GCP_GATEWAY_CERTIFICATE_EXPIRY_ALERT:\n\nThe workflow GCP Gateway Certificate Expiry Check failed for ${{env.environment}} environment.'
          }" "${{ env.SLACK_WEBHOOK_URL }}"
