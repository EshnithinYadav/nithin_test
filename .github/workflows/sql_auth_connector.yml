name: GCP Cloud SQL Auth Proxy Version Check and Send Slack Alerts

on:
  workflow_dispatch:
  #schedule:
  #  - cron: '30 13 * * 1' # Runs every Monday at 7 PM IST (1:30 PM UTC)

jobs:
  GCP_SQL_Auth_Proxy_Version_Check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [stage]  # Define the environments

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      - name: Set environment variables
        run: |
          if [ "${{ matrix.env }}" == "stage" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY=${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY_STAGE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCLOUD_STAGE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_STAGE }}" >> $GITHUB_ENV
          elif [ "${{ matrix.env }}" == "prod" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY=${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY_PROD }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCLOUD_PROJECT_ID_PROD }}" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PROD }}" >> $GITHUB_ENV
          fi

      - name: Authenticate to Google Cloud
        run: |
          echo "${{ env.GCP_SERVICE_ACCOUNT_KEY }}" | base64 --decode > $HOME/gcp-key.json
          gcloud auth activate-service-account --key-file=$HOME/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}

      - name: Capitalize the env name
        run: |
          environment=$(echo ${{ matrix.env }} | tr '[:lower:]' '[:upper:]')
          echo "environment=${environment}" >> $GITHUB_ENV

      - name: Fetch Cloud SQL Auth Proxy version from instance metadata
        run: |
          # Function to extract the SQL Auth Proxy version from instance metadata
          fetch_sql_auth_proxy_version() {
          local instance_name=$1
          local zone=$2
      
          # Extract the startup-script metadata which contains the Cloud SQL Auth Proxy version
          sql_proxy_version=$(gcloud compute instances describe "$instance_name" --zone="$zone" --format="value(metadata.items.startup-script)" | grep -oP 'v\d+\.\d+\.\d+')
      
          if [ -z "$sql_proxy_version" ]; then
              echo "Warning: No Cloud SQL Auth Proxy version found for instance $instance_name in $zone. Skipping."
              return 0  # Continue even if this instance doesn't have a proxy version
          fi
      
          echo "Instance $instance_name in $zone is using Cloud SQL Auth Proxy version $sql_proxy_version."
          echo "$instance_name,$zone,$sql_proxy_version" >> sql_auth_proxy_versions.txt
          echo "Logged: $instance_name,$zone,$sql_proxy_version"
          
          # Verify if the logging was successful
          if [ $? -ne 0 ]; then
              echo "Error: Failed to log SQL Auth Proxy version for instance $instance_name."
              exit 1
          fi
      }


          # Fetch the instance names and zones dynamically for cloud-sql-connect and sql-proxy
          instances_and_zones=$(gcloud compute instances list --format="csv[no-heading](name,zone)" | grep -E 'cloud-sql-connect|.*-proxy-*')

          if [ -z "$instances_and_zones" ]; then
              echo "Warning: No instances found matching the criteria."
              echo "[]" > sql_auth_proxy_versions.json  # Create an empty JSON array
              exit 0  # Exit without error to allow the workflow to continue
          fi

          # Initialize JSON array
          echo "[" > sql_auth_proxy_versions.json

          # Loop through each instance and fetch the SQL Auth Proxy version
          while IFS=, read -r instance_name zone; do
              fetch_sql_auth_proxy_version "$instance_name" "$zone"
              
              # Append to JSON array if version was found
              if [ -f sql_auth_proxy_versions.txt ]; then
                  version=$(tail -n1 sql_auth_proxy_versions.txt | cut -d',' -f3)
                  echo "  {\"instance\": \"$instance_name\", \"zone\": \"$zone\", \"version\": \"$version\"}," >> sql_auth_proxy_versions.json
              fi
          done <<< "$instances_and_zones"

          # Remove trailing comma and close JSON array
          sed -i '$ s/,$//' sql_auth_proxy_versions.json
          echo "]" >> sql_auth_proxy_versions.json

          # Debugging: Check if the versions file is being created and populated
          if [ -f sql_auth_proxy_versions.json ]; then
              echo "SQL Auth Proxy versions were successfully fetched and saved."
              cat sql_auth_proxy_versions.json  # Print out the contents for verification
          else
              echo "Warning: No SQL Auth Proxy versions were found for any instances."
              echo "[]" > sql_auth_proxy_versions.json  # Create an empty JSON array
          fi

      - name: Fetch the latest Cloud SQL Auth Proxy version
        id: get_latest_version
        run: |
          # Fetch the latest version from GitHub releases
          latest_version=$(curl -s https://api.github.com/repos/GoogleCloudPlatform/cloud-sql-proxy/releases/latest | jq -r '.tag_name')
          echo "Latest Cloud SQL Auth Proxy version: $latest_version"
          echo "LATEST_VERSION=$latest_version" >> $GITHUB_ENV

          # Get the previous (n-1) version by parsing the latest version string
          previous_version=$(echo "$latest_version" | awk -F. '{OFS="."; $2=$2-1; print $0}')
          echo "Previous version (n-1): $previous_version"
          echo "PREVIOUS_VERSION=$previous_version" >> $GITHUB_ENV

      - name: Compare versions and send Slack alerts if updates are needed
        run: |
          latest_version="${{ env.LATEST_VERSION }}"
          previous_version="${{ env.PREVIOUS_VERSION }}"
          versions=$(cat sql_auth_proxy_versions.json)
          update_needed=false
          
          for row in $(echo "${versions}" | jq -r '.[] | @base64'); do
              _jq() {
                  echo ${row} | base64 --decode | jq -r ${1}
              }
              
              instance=$(_jq '.instance')
              zone=$(_jq '.zone')
              current_version=$(_jq '.version')
              
              # Compare current version with both latest and n-1 version
              if [ "$current_version" != "$latest_version" ] && [ "$current_version" != "$previous_version" ]; then
                  update_needed=true
                  message="Instance: $instance in $zone is using an outdated Cloud SQL Auth Proxy version ($current_version). Latest version is $latest_version, acceptable version is $previous_version."
                  curl -X POST -H 'Content-type: application/json' --data "{ 'text': 'GCP_SQL_AUTH_PROXY_VERSION_CHECK:\n\n$message'}" ${{ env.SLACK_WEBHOOK_URL }}
              else
                  echo "Instance $instance is using an acceptable version ($current_version)."
              fi
          done
          
          if [ "$update_needed" = false ]; then
              echo "All instances are using either the latest or the n-1 version of Cloud SQL Auth Proxy."
          fi

      - name: Send alert to Slack on job failure
        if: ${{ failure() }}
        run: |
          message="The workflow for Cloud SQL Auth Proxy version check failed for ${{env.environment}} environment."
          curl -X POST -H 'Content-type: application/json' --data "{ 'text': 'GCP_SQL_AUTH_PROXY_VERSION_CHECK:\n\n$message'}" ${{ env.SLACK_WEBHOOK_URL }}
