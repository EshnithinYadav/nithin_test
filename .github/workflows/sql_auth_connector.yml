name: CLOUD_SQL_VERSION_CHECK

on:
  workflow_dispatch:
  # Uncomment the below line to schedule the workflow to run every Monday at 1:30 PM UTC (7:00 PM IST)
  # schedule:
  #   - cron: '30 13 * * 1'

jobs:
  check_cloud_sql_version:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        env: [stage, prod]  # Define the environments

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      - name: Set environment variables
        run: |
          if [ "${{ matrix.env }}" == "stage" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY=${{ secrets.GCP_SA_KEY_STAGE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_STAGE }}" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_STAGE }}" >> $GITHUB_ENV
          elif [ "${{ matrix.env }}" == "prod" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY=${{ secrets.GCP_SA_KEY_PROD }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_PROD }}" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PROD }}" >> $GITHUB_ENV
          fi
          echo "ENVIRONMENT=${{ matrix.env }}" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        run: |
          echo "${{ env.GCP_SERVICE_ACCOUNT_KEY }}" | base64 --decode > $HOME/gcp-key.json
          gcloud auth activate-service-account --key-file=$HOME/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client

      - name: Fetch Cloud SQL Auth Connector and Proxy versions
        id: fetch_versions
        run: |
          python - <<EOF
          import googleapiclient.discovery
          from google.oauth2 import service_account
          import json
          import os

          credentials = service_account.Credentials.from_service_account_file(
              '$HOME/gcp-key.json',
              scopes=['https://www.googleapis.com/auth/compute.readonly']
          )
          compute = googleapiclient.discovery.build('compute', 'v1', credentials=credentials)

          templates = compute.instanceTemplates().list(project=os.environ['GCP_PROJECT_ID']).execute()

          connector_version = None
          proxy_version = None
          for template in templates['items']:
              metadata = template['properties'].get('metadata', {}).get('items', [])
              for item in metadata:
                  if item['key'] == 'startup-script':
                      script = item['value']
                      if 'cloud_sql_proxy-' in script:
                          connector_version = script.split('cloud_sql_proxy-')[1].split('-linux')[0]
                      if 'cloud-sql-proxy.' in script:
                          proxy_version = script.split('cloud-sql-proxy.')[1].split('.tar')[0]

          print(f"::set-output name=connector_version::{connector_version}")
          print(f"::set-output name=proxy_version::{proxy_version}")
          EOF

      - name: Fetch latest Cloud SQL Auth Connector release
        id: latest_release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/GoogleCloudPlatform/cloud-sql-proxy/releases/latest | jq -r .tag_name)
          echo "::set-output name=version::${LATEST_RELEASE#v}"

      - name: Compare versions
        id: compare_versions
        run: |
          CURRENT_CONNECTOR_VERSION="${{ steps.fetch_versions.outputs.connector_version }}"
          CURRENT_PROXY_VERSION="${{ steps.fetch_versions.outputs.proxy_version }}"
          LATEST_VERSION="${{ steps.latest_release.outputs.version }}"

          version_lt() {
            test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" != "$1";
          }

          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
          N_MINUS_ONE_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2] - 1))"

          echo "Cloud SQL versions in ${{ env.ENVIRONMENT }} ENV:" > version_message.txt
          echo "Current Connector Version: $CURRENT_CONNECTOR_VERSION" >> version_message.txt
          echo "Current Proxy Version: $CURRENT_PROXY_VERSION" >> version_message.txt
          echo "Latest N-1 Version: $N_MINUS_ONE_VERSION" >> version_message.txt

          if version_lt "$CURRENT_CONNECTOR_VERSION" "$N_MINUS_ONE_VERSION"; then
            echo "update_needed=true" >> $GITHUB_ENV
            echo "Cloud SQL Auth Connector needs update." >> version_message.txt
          elif version_lt "$CURRENT_PROXY_VERSION" "$N_MINUS_ONE_VERSION"; then
            echo "update_needed=true" >> $GITHUB_ENV
            echo "SQL Auth Proxy needs update." >> version_message.txt
          else
            echo "Both versions are up to date." >> version_message.txt
          fi

          cat version_message.txt > VERSION_MESSAGE.txt

      - name: Send Slack Alert if update is needed
        if: env.update_needed == 'true'
        run: |
          webhook_url="${{ env.SLACK_WEBHOOK_URL }}"
          message_content=$(cat VERSION_MESSAGE.txt)
          curl -X POST -H 'Content-type: application/json' --data "{ 'text': 'CLOUD SQL VERSION CHECK:\n\n$message_content'}" "$webhook_url"

      - name: Send alert to Slack on job failure
        if: failure()
        run: |
          webhook_url="${{ env.SLACK_WEBHOOK_URL }}"
          message="The Cloud SQL version check JOB failed for ${{ env.ENVIRONMENT }} environment."
          curl -X POST -H 'Content-type: application/json' --data "{ 'text': 'CLOUD SQL VERSION CHECK:\n\n$message'}" "$webhook_url"
