name: SQL_AUTH_CONNECTOR_VERSION_CHECK

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '30 13 * * 1'

jobs:
  check_sql_auth_connector_version:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        env: [stage, prod]

    steps:
      # ... [previous steps remain the same] ...

      - name: Fetch current project version
        id: fetch_current
        run: |
          echo "Listing instance templates..."
          gcloud compute instance-templates list --filter="name:cloudsql-auth-template" --sort-by=~creationTimestamp --limit=1 --format="value(name)"
          
          LATEST_TEMPLATE=$(gcloud compute instance-templates list --filter="name:cloudsql-auth-template" --sort-by=~creationTimestamp --limit=1 --format="value(name)")
          echo "Latest template: $LATEST_TEMPLATE"
          
          if [ -z "$LATEST_TEMPLATE" ]; then
            echo "No matching instance template found. Checking all templates..."
            gcloud compute instance-templates list
            echo "ERROR: No instance template with 'cloudsql-auth-template' in the name was found." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "Describing template: $LATEST_TEMPLATE"
          TEMPLATE_INFO=$(gcloud compute instance-templates describe $LATEST_TEMPLATE --format=json)
          
          echo "Extracting version from template..."
          CURRENT_VERSION=$(echo "$TEMPLATE_INFO" | jq -r '.properties.metadata.items[] | select(.key == "startup-script") | .value' | grep -oP 'https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v\K[0-9.]+' || echo "Version not found")
          
          if [ "$CURRENT_VERSION" == "Version not found" ]; then
            echo "WARNING: Could not extract SQL Auth Connector version from the template." >> $GITHUB_STEP_SUMMARY
            echo "Template contents:" >> $GITHUB_STEP_SUMMARY
            echo "$TEMPLATE_INFO" >> $GITHUB_STEP_SUMMARY
          else
            echo "Current version: $CURRENT_VERSION"
          fi
          
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "TEMPLATE_NAME=$LATEST_TEMPLATE" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare
        run: |
          LATEST=${{ steps.fetch_latest.outputs.LATEST_VERSION }}
          CURRENT=${{ steps.fetch_current.outputs.CURRENT_VERSION }}
          
          if [ "$CURRENT" == "Version not found" ]; then
            echo "UPDATE_NEEDED=unknown" >> $GITHUB_OUTPUT
            echo "Unable to determine if update is needed. Current version could not be extracted."
          elif [ $(printf '%s\n' "$LATEST" "$CURRENT" | sort -V | head -n1) = "$CURRENT" ] && [ "$LATEST" != "$CURRENT" ]; then
            echo "UPDATE_NEEDED=true" >> $GITHUB_OUTPUT
            echo "Version update needed. Latest: $LATEST, Current: $CURRENT"
          else
            echo "UPDATE_NEEDED=false" >> $GITHUB_OUTPUT
            echo "No update needed. Latest: $LATEST, Current: $CURRENT"
          fi

      - name: Send Slack notification
        if: steps.compare.outputs.UPDATE_NEEDED != 'false'
        run: |
          webhook_url="${{ env.SLACK_WEBHOOK_URL }}"
          if [ "${{ steps.compare.outputs.UPDATE_NEEDED }}" == "true" ]; then
            message="SQL Auth Connector update available for ${{ env.ENVIRONMENT }} environment!
            Project: ${{ env.GCP_PROJECT_ID }}
            Template: ${{ steps.fetch_current.outputs.TEMPLATE_NAME }}
            Current version: ${{ steps.fetch_current.outputs.CURRENT_VERSION }}
            Latest version: ${{ steps.fetch_latest.outputs.LATEST_VERSION }}"
          else
            message="Unable to check SQL Auth Connector version for ${{ env.ENVIRONMENT }} environment.
            Project: ${{ env.GCP_PROJECT_ID }}
            Template: ${{ steps.fetch_current.outputs.TEMPLATE_NAME }}
            Please check the GitHub Actions logs for more details."
          fi
          curl -X POST -H 'Content-type: application/json' --data "{ 'text': 'SQL AUTH CONNECTOR VERSION CHECK:\n\n$message'}" "$webhook_url"

      # ... [rest of the workflow remains the same] ...

      - name: Send alert to Slack on job failure
        if: ${{ failure() }}
        run: |
          webhook_url="${{ env.SLACK_WEBHOOK_URL }}"
          message="The SQL Auth Connector version check job failed for ${{ env.ENVIRONMENT }} environment."
          curl -X POST -H 'Content-type: application/json' --data "{ 'text': 'SQL AUTH CONNECTOR VERSION CHECK:\n\n$message'}" "$webhook_url"
