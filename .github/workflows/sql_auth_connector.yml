name: SQL_AUTH_CONNECTOR_VERSION_CHECK

on:
  schedule:
    - cron: '0 12 * * 1'  # Run every Monday at 12:00 PM UTC

  workflow_dispatch:  # Allows manually triggering the workflow

jobs:
  check_sql_auth_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          if [ "${{ matrix.env }}" == "dev" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY=${{ secrets.GCP_SERVICE_ACCOUNT_KEY_DEV }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_DEV }}" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_DEV }}" >> $GITHUB_ENV
          elif [ "${{ matrix.env }}" == "stage" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY=${{ secrets.GCP_SERVICE_ACCOUNT_KEY_STAGE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_STAGE }}" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_STAGE }}" >> $GITHUB_ENV
          elif [ "${{ matrix.env }}" == "prod" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY=${{ secrets.GCP_SERVICE_ACCOUNT_KEY_PROD }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_PROD }}" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PROD }}" >> $GITHUB_ENV
          fi
          echo "ENVIRONMENT=${{ matrix.env }}" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        run: |
          echo "${{ env.GCP_SERVICE_ACCOUNT_KEY }}" | base64 --decode > $HOME/gcp-key.json
          gcloud auth activate-service-account --key-file=$HOME/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}

      - name: Fetch Latest SQL Auth Proxy Version from GitHub
        run: |
          latest_version=$(curl -s https://api.github.com/repos/GoogleCloudPlatform/cloud-sql-proxy/releases/latest | jq -r '.tag_name')
          echo "Latest SQL Auth Proxy version: $latest_version"
          echo "LATEST_SQL_AUTH_VERSION=$latest_version" >> $GITHUB_ENV

      - name: Get Current Project Version from Instance Template
        run: |
          instance_template=$(gcloud compute instance-templates describe cloudsql-auth-template-20240820-latest-newtemplate-20240923 --format="json")
          current_version=$(echo "$instance_template" | jq -r '.properties.metadata.items[] | select(.key == "sql-auth-proxy-version").value')
          echo "Current project version: $current_version"
          echo "CURRENT_PROJECT_VERSION=$current_version" >> $GITHUB_ENV

      - name: Compare Versions and Check n-1 Strategy
        run: |
          # Remove 'v' prefix from the versions
          latest_version="${{ env.LATEST_SQL_AUTH_VERSION#v }}"
          current_version="${{ env.CURRENT_PROJECT_VERSION#v }}"

          # Extract major, minor, and patch components
          latest_major=$(echo $latest_version | cut -d. -f1)
          latest_minor=$(echo $latest_version | cut -d. -f2)
          current_major=$(echo $current_version | cut -d. -f1)
          current_minor=$(echo $current_version | cut -d. -f2)

          # Check n-1 condition (if current version is below latest - 1)
          n_minus_one_minor=$((latest_minor - 1))

          if [ "$current_major" -lt "$latest_major" ] || [ "$current_minor" -lt "$n_minus_one_minor" ]; then
            echo "A new version (n-1) is available for upgrade."
            echo "ALERT_NEEDED=true" >> $GITHUB_ENV
          else
            echo "No upgrade is required."
          fi

      - name: Send Slack Alert for Available Upgrade
        if: ${{ env.ALERT_NEEDED == 'true' }}
        run: |
          webhook_url="${{ env.SLACK_WEBHOOK_URL }}"
          message="A new version of Cloud SQL Auth Proxy is available for the ${{ env.ENVIRONMENT }} environment. The current version is ${{ env.CURRENT_PROJECT_VERSION }} and the latest version is ${{ env.LATEST_SQL_AUTH_VERSION }}."
          curl -X POST -H 'Content-type: application/json' --data "{ 'text': '$message'}" "$webhook_url"

      - name: Send Slack Alert on Workflow Failure
        if: ${{ failure() }}
        run: |
          webhook_url="${{ env.SLACK_WEBHOOK_URL }}"
          message="The SQL Auth Connector version check job failed for ${{ env.ENVIRONMENT }} environment."
          curl -X POST -H 'Content-type: application/json' --data "{ 'text': '$message'}" "$webhook_url"
