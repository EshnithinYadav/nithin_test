name: Check Cloud SQL Auth Proxy Version and Send Alerts

on:
  workflow_dispatch:

jobs:
  Check_SQL_Auth_Proxy_Version:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [stage, prod]  # Define the environments

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          if [ "${{ matrix.env }}" == "stage" ]; then
            echo "INSTANCE_TEMPLATE_URL=https://www.googleapis.com/compute/v1/projects/venu-test-403812/global/instanceTemplates/cloudsql-auth-template-20240829-new-template-20092024" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_STAGE }}" >> $GITHUB_ENV
          elif [ "${{ matrix.env }}" == "prod" ]; then
            echo "INSTANCE_TEMPLATE_URL=https://www.googleapis.com/compute/v1/projects/venu-prod-403812/global/instanceTemplates/cloudsql-auth-template-20240829-new-template-20092024" >> $GITHUB_ENV
            echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PROD }}" >> $GITHUB_ENV
          fi

      - name: Capitalize the env name
        run: |
          echo "ENVIRONMENT=$(echo ${{ matrix.env }} | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

      - name: Fetch current Cloud SQL Auth Proxy version from GCP instance template metadata
        id: get_current_version
        run: |
          current_version=$(gcloud compute instance-templates describe ${{ env.INSTANCE_TEMPLATE_URL }} --format="value(properties.metadata.items.startup-script)" | grep -oP 'v\d+\.\d+\.\d+')
          if [ -z "$current_version" ]; then
            echo "Failed to fetch the current version from the instance template."
            exit 1
          fi
          echo "Current version: $current_version"
          echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV

      - name: Fetch the latest Cloud SQL Auth Proxy version
        id: get_latest_version
        run: |
          latest_release=$(curl -s https://api.github.com/repos/GoogleCloudPlatform/cloud-sql-proxy/releases/latest | jq -r '.tag_name')
          if [ -z "$latest_release" ]; then
            echo "Failed to fetch the latest version."
            exit 1
          fi
          echo "Latest release version: $latest_release"
          echo "LATEST_VERSION=$latest_release" >> $GITHUB_ENV

      - name: Compare versions and send Slack alert if outdated
        run: |
          if [ "${{ env.CURRENT_VERSION }}" != "${{ env.LATEST_VERSION }}" ]; then
            message="The Cloud SQL Auth Proxy version for ${ENVIRONMENT} environment is outdated. Current version: ${{ env.CURRENT_VERSION }}, Latest version: ${{ env.LATEST_VERSION }}. Please update to the latest version."
            curl -X POST -H 'Content-type: application/json' --data "{ 'text': '${message}'}" ${{ env.SLACK_WEBHOOK_URL }}
          else
            echo "Cloud SQL Auth Proxy version is up to date."
          fi

      - name: Send alert to Slack on job failure
        if: ${{ failure() }}
        run: |
          message="The workflow to check Cloud SQL Auth Proxy version failed for ${ENVIRONMENT} environment."
          curl -X POST -H 'Content-type: application/json' --data "{ 'text': '${message}'}" ${{ env.SLACK_WEBHOOK_URL }}
